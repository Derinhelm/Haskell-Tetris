
==================== FINAL INTERFACE ====================
2019-03-22 19:09:05.75169145 UTC

interface project-template-0.0.0.0-HkCShUnfJdZ4nPO3MEi7an:MyProj 8063
  interface hash: e526b52291e07bb6d2228072f1e40f82
  ABI hash: d89e76ae57cb078b58ac093cd3234a16
  export-list hash: 35adfd03f76faa7a33a02cd557f8d6e5
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 7a242ffa3d761dff45aed995f1434522
  opt_hash: 6faf2de08de32d19db9870899d88e59a
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  plugin_hash: ad164012d6b1e14942349d58b1132007
  sig of: Nothing
  used TH splices: False
  where
exports:
  MyProj.checkEnd
  MyProj.checkFlyCell
  MyProj.createCellShiftFigure
  MyProj.deleteLines
  MyProj.endGame
  MyProj.gameLoop
  MyProj.handle
  MyProj.haveFlyFigure
  MyProj.newFigureOnField
  MyProj.newFigureOnGame
  MyProj.shiftFigure
  MyProj.shiftFigureOnField
module dependencies: Constans Draw Type
package dependencies: GLURaw-2.0.0.4 GLUT-2.7.0.14
                      ObjectName-1.1.0.1 OpenGL-3.0.2.2 OpenGLRaw-3.3.2.0
                      StateVar-1.1.1.1 array-0.5.3.0 base-4.12.0.0 binary-0.8.6.0
                      bmp-1.2.6.3 bytestring-0.10.8.2 containers-0.6.0.1 deepseq-1.4.4.0
                      fixed-0.2.1.1 ghc-boot-th-8.6.3 ghc-prim-0.5.3 gloss-1.13.0.1
                      gloss-rendering-1.13.0.2 half-0.3 integer-gmp-1.0.2.0
                      pretty-1.1.3.6 random-1.1 stm-2.5.0.0 template-haskell-2.14.0.0
                      text-1.2.3.1 time-1.8.0.2
orphans: stm-2.5.0.0:Control.Monad.STM text-1.2.3.1:Data.Text
         binary-0.8.6.0:Data.Binary.Generic text-1.2.3.1:Data.Text.Show
         bytestring-0.10.8.2:Data.ByteString.Builder
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian base-4.12.0.0:GHC.Float
         base-4.12.0.0:GHC.Base
family instance modules: base-4.12.0.0:Control.Applicative
                         base-4.12.0.0:Data.Complex base-4.12.0.0:Data.Functor.Compose
                         base-4.12.0.0:Data.Functor.Const
                         base-4.12.0.0:Data.Functor.Identity
                         base-4.12.0.0:Data.Functor.Product base-4.12.0.0:Data.Functor.Sum
                         base-4.12.0.0:Data.Monoid base-4.12.0.0:Data.Semigroup
                         base-4.12.0.0:Data.Semigroup.Internal base-4.12.0.0:Data.Version
                         base-4.12.0.0:Data.Void base-4.12.0.0:GHC.Exts
                         base-4.12.0.0:GHC.Generics base-4.12.0.0:GHC.IO.Exception
                         containers-0.6.0.1:Data.IntMap.Internal
                         containers-0.6.0.1:Data.IntSet.Internal
                         containers-0.6.0.1:Data.Map.Internal
                         containers-0.6.0.1:Data.Sequence.Internal
                         containers-0.6.0.1:Data.Set.Internal containers-0.6.0.1:Data.Tree
                         ghc-boot-th-8.6.3:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.6.3:GHC.LanguageExtensions.Type half-0.3:Numeric.Half
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         template-haskell-2.14.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.1:Data.Text
import  -/  base-4.12.0.0:Data.Maybe 1e8e1362415df45376dffd98f8a47766
import  -/  base-4.12.0.0:GHC.Base cc906f98291a1b830546e99a96674547
import  -/  base-4.12.0.0:GHC.List 734a72beb76d276fb4a0ba2689a5711f
import  -/  base-4.12.0.0:Prelude 5c01365ec01f83bd405ac01cbb9a8d76
import  -/  ghc-prim-0.5.3:GHC.Classes e0d9c979f6368701f34fa421754d2cce
import  -/  gloss-1.13.0.1:Graphics.Gloss dc3d422d35cd32353ee5470deb98e8ac
import  -/  gloss-1.13.0.1:Graphics.Gloss.Interface.Pure.Game 3b871ad7b6d70d672603a275ef8ba1e4
import  -/  gloss-1.13.0.1:Graphics.Gloss.Internals.Interface.Event 70b3da3875a2c6427df4272fec7eb5e1
import  -/  gloss-rendering-1.13.0.2:Graphics.Gloss.Internals.Data.Color 2716426e7777628bb37f6a888abf7b9e
import  -/  Constans a2074c6396511319a3de7e4f866d3841
  exports: 4e851395688f4e2271ad07b9b5734963
  colorBoard a46ee52867c7f2352348479a0f097919
import  -/  Draw a04544b4bb338a821708f5bd35493658
  exports: 551067e2732157ecbd258059c1ba69cc
import  -/  Type 7b8d5bd3c80029b0a8a22edfd6169f19
  exports: 909189a38ea3238aedea71017e62ecfa
  Cell a490fb91284b41c392b2e9ae69e56c0f
  Cell ce69d132984f15c162cb28e115878ea4
  CoordFigures b3b9710d1bc9d5841b96879fe6ccdd74
  Field cff2286d27e6392df8d5af5cd3f4b99a
  GameState 59c849fe145a77337055cb422c2bea74
  GameState 9c21f4bed2afaaca1dc2e29261755836
  cellColor ce69d132984f15c162cb28e115878ea4
  cellType ce69d132984f15c162cb28e115878ea4
  changeCellInField 799ff397206bd1f1e15baa9e2bc2c8a8
  colorTetr 9c21f4bed2afaaca1dc2e29261755836
  coordTetr 9c21f4bed2afaaca1dc2e29261755836
  funFieldAll f3348f54733fff744c14c483dc51410e
  funFieldAny e2fc49ae8e6e6604234795ccc0087a1c
  gameField 9c21f4bed2afaaca1dc2e29261755836
  gameFigures 9c21f4bed2afaaca1dc2e29261755836
  gameRandomGen 9c21f4bed2afaaca1dc2e29261755836
  gameResult 9c21f4bed2afaaca1dc2e29261755836
  higherCell d8e5b97e01498246c56ca20b87c5acd1
  lowerCell b10c0207ab1dd2abc3b2171d317f91b1
  mapField e011b7b413381307ce976d37845fc3d2
  numCell ce69d132984f15c162cb28e115878ea4
  numLine ce69d132984f15c162cb28e115878ea4
  typeCell 46a2f670b604fe56b2cc6403b9b8d47b
import  -/  random-1.1:System.Random 8c06dce30a9b8b4f2b7c15fb3f418e08
cd917b6f8bcf6b8aaecc693871acbf44
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   MyProj.$trModule3
                   MyProj.$trModule1) -}
637140a171b8785eee75ba9876bdb7d6
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS MyProj.$trModule2) -}
204fe942f1473ca5b92b79589814a20e
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("MyProj"#) -}
bd66823722c82efecacae7b7af71d506
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS MyProj.$trModule4) -}
99aa6c486c15517abc54f67dbd421cb5
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("project-template-0.0.0.0-HkCShUnfJdZ4nPO3MEi7an"#) -}
ffda611d4faa05553388cebe5077438b
  $wcheckFlyCell ::
    Type.Field
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Bool
  {- Arity: 4, Strictness: <L,1*U><S,1*U><L,1*U(U)><L,1*U(1*U)>,
     Inline: [2],
     Unfolding: (\ (w :: Type.Field)
                   (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Types.Int)
                   (ww2 :: GHC.Types.Int) ->
                 case ww of wild {
                   DEFAULT
                   -> case ww2 of wild1 { GHC.Types.I# x ->
                      case x of wild2 {
                        DEFAULT -> GHC.Types.True
                        1#
                        -> case ww1 of ww3 { GHC.Types.I# ww4 ->
                           case GHC.List.$w!!
                                  @ Type.Cell
                                  (GHC.List.$w!! @ Type.Line w (GHC.Prim.+# wild 1#))
                                  ww4 of wild3 { Type.Cell ds1 ds2 ds3 ds4 ->
                           case ds3 of wild4 { GHC.Types.I# x1 ->
                           case x1 of wild5 {
                             DEFAULT -> GHC.Types.True 0# -> GHC.Types.False } } } } } }
                   15# -> GHC.Types.True }) -}
e5f2ec8b52bd0f9e0f178213a2e05b9c
  checkEnd :: Type.Field -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                MyProj.checkEnd1
                  `cast`
                (<Type.Field>_R ->_R Data.Semigroup.Internal.N:Any[0]) -}
a7fa86d6ef7a492f15f0d75b944fd06d
  checkEnd1 :: Type.Field -> Data.Semigroup.Internal.Any
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (field :: Type.Field) ->
                 letrec {
                   go :: [Type.Line] -> Data.Semigroup.Internal.Any
                     <join 1> {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [Type.Line]) ->
                     case ds of wild {
                       []
                       -> GHC.Types.False `cast` (Sym (Data.Semigroup.Internal.N:Any[0]))
                       : y ys
                       -> let {
                            exit :: Data.Semigroup.Internal.Any <join 0> = go ys
                          } in
                          letrec {
                            go1 :: [Type.Cell] -> Data.Semigroup.Internal.Any
                              <join 1> {- Arity: 1, Strictness: <S,1*U> -}
                            = \ (ds1 :: [Type.Cell]) ->
                              case ds1 of wild1 {
                                [] -> exit
                                : y1 ys1
                                -> case y1 of wild2 { Type.Cell ds2 ds3 ds4 ds5 ->
                                   case ds4 of wild3 { GHC.Types.I# x ->
                                   case x of wild4 {
                                     DEFAULT -> go1 ys1
                                     1#
                                     -> case ds2 of ww5 { GHC.Types.I# ww6 ->
                                        case ww6 of wild5 {
                                          DEFAULT
                                          -> case ds3 of ww2 { GHC.Types.I# ww3 ->
                                             case GHC.List.$w!!
                                                    @ Type.Cell
                                                    (GHC.List.$w!!
                                                       @ Type.Line
                                                       field
                                                       (GHC.Prim.+# wild5 1#))
                                                    ww3 of wild6 { Type.Cell ds6 ds7 ds8 ds9 ->
                                             case ds8 of wild7 { GHC.Types.I# x1 ->
                                             case x1 of wild8 {
                                               DEFAULT -> go1 ys1
                                               0#
                                               -> GHC.Types.True
                                                    `cast`
                                                  (Sym (Data.Semigroup.Internal.N:Any[0])) } } } }
                                          15#
                                          -> case Data.Maybe.fromJust1
                                             ret_ty Data.Semigroup.Internal.Any
                                             of {} } } } } } }
                          } in
                          go1 y }
                 } in
                 go field) -}
f471b4471bbe289c7956404bab03bd59
  checkFlyCell :: Type.Field -> Type.Cell -> GHC.Types.Bool
  {- Arity: 2,
     Strictness: <L,1*U><S(S(S)LLL),1*U(1*U(1*U),1*U(U),1*U(1*U),A)>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Type.Field) (w1 :: Type.Cell) ->
                 case w1 of ww { Type.Cell ww1 ww2 ww3 ww4 ->
                 case ww1 of ww5 { GHC.Types.I# ww6 ->
                 MyProj.$wcheckFlyCell w ww6 ww2 ww3 } }) -}
40b437354a5adbed97a3c7dddfea5460
  createCellShiftFigure :: Type.Field -> Type.Cell -> Type.Cell
  {- Arity: 2, Strictness: <L,1*U><S(S(S)LLL),1*U(U(U),U(U),U,U)>m,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Type.Field) (w1 :: Type.Cell) ->
                 case w1 of ww { Type.Cell ww1 ww2 ww3 ww4 ->
                 case ww1 of ww5 { GHC.Types.I# ww6 ->
                 case ww6 of wild {
                   DEFAULT
                   -> case ww2 of ww7 { GHC.Types.I# ww8 ->
                      case GHC.List.$w!!
                             @ Type.Cell
                             (GHC.List.$w!! @ Type.Line w (GHC.Prim.-# wild 1#))
                             ww8 of wild1 { Type.Cell ds1 ds2 ds3 ds4 ->
                      case ds3 of wild2 { GHC.Types.I# ds ->
                      case ds of ds7 {
                        DEFAULT -> MyProj.createCellShiftFigure3
                        0# -> Type.Cell (GHC.Types.I# wild) ww7 ww3 ww4
                        1#
                        -> Type.Cell
                             (GHC.Types.I# wild)
                             ww7
                             MyProj.createCellShiftFigure2
                             ww4
                        2# -> Type.Cell (GHC.Types.I# wild) ww7 ww3 ww4 } } } }
                   1#
                   -> Type.Cell
                        (GHC.Types.I# 1#)
                        ww2
                        MyProj.createCellShiftFigure1
                        Graphics.Gloss.Data.Color.white } } }) -}
21d550f65d211fad071e16ef9f3ad18e
  createCellShiftFigure1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
b49eefaaa1d8b0f11c15b82f791938fd
  createCellShiftFigure2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1#) -}
39347a4528ee518480d91797c2c89e93
  createCellShiftFigure3 :: Type.Cell
  {- Strictness: x -}
207e6e13d640b459e260ebd38a86377e
  deleteLines ::
    Type.Field -> GHC.Types.Int -> (Type.Field, GHC.Types.Int)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m,
     Unfolding: InlineRule (0, True, True)
                (GHC.Tuple.(,) @ Type.Field @ GHC.Types.Int) -}
3461008f34dcd1f04e0f23b60b909fb9
  endGame :: Type.GameState -> Type.GameState
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U,U,U,U,U)>m,
     Unfolding: InlineRule (1, True, True)
                (\ (x :: Type.GameState) -> x) -}
4871ee6ed2fb4f99c3d2ace811b7ec89
  gameLoop :: GHC.Types.Float -> Type.GameState -> Type.GameState
  {- Arity: 2, Strictness: <L,A><S(SLLLLL),1*U(U,U,U,U,U,U)>m,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Float) (w1 :: Type.GameState) ->
                 case w1 of ww { Type.GameState ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case MyProj.haveFlyFigure ww1 of wild {
                   GHC.Types.False
                   -> case (MyProj.checkEnd1 ww1)
                             `cast`
                           (Data.Semigroup.Internal.N:Any[0]) of wild1 {
                        GHC.Types.False
                        -> Type.GameState
                             (case ww3 of wild2 {
                                [] -> case GHC.List.badHead ret_ty Type.Field of {}
                                : x ds1
                                -> case x of ww7 { GHC.Types.I# ww8 ->
                                   MyProj.newFigureOnField
                                     ww1
                                     (GHC.List.$w!! @ Type.CoordFigures ww5 ww8)
                                     (GHC.List.$w!!
                                        @ Graphics.Gloss.Internals.Data.Color.Color
                                        ww6
                                        ww8) } })
                             ww2
                             (GHC.List.tail @ Type.NumberFigure ww3)
                             ww4
                             ww5
                             ww6
                        GHC.Types.True -> Type.GameState ww1 ww2 ww3 ww4 ww5 ww6 }
                   GHC.Types.True
                   -> Type.GameState
                        (MyProj.shiftFigureOnField ww1)
                        ww2
                        ww3
                        ww4
                        ww5
                        ww6 } }) -}
3b9f83435c11fcc50bcfd8abf512c7cb
  handle ::
    Graphics.Gloss.Internals.Interface.Event.Event
    -> Type.GameState -> Type.GameState
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><S,1*U(U,U,U,U,U,U)>m,
     Unfolding: InlineRule (2, True, True)
                (\ (key :: Graphics.Gloss.Internals.Interface.Event.Event)
                   (game :: Type.GameState) ->
                 game) -}
4cd2e78bf5555594a68a4d9300534734
  haveFlyFigure :: Type.Field -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (field :: Type.Field) ->
                 let {
                   exit :: GHC.Types.Bool <join 0>
                   = (MyProj.haveFlyFigure_go field)
                       `cast`
                     (Data.Semigroup.Internal.N:Any[0])
                 } in
                 letrec {
                   go :: [Type.Line] -> GHC.Types.Bool
                     <join 1> {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [Type.Line]) ->
                     case ds of wild {
                       [] -> exit
                       : y ys
                       -> let {
                            exit1 :: GHC.Types.Bool <join 0> = go ys
                          } in
                          letrec {
                            go1 :: [Type.Cell] -> GHC.Types.Bool
                              <join 1> {- Arity: 1, Strictness: <S,1*U> -}
                            = \ (ds1 :: [Type.Cell]) ->
                              case ds1 of wild1 {
                                [] -> exit1
                                : y1 ys1
                                -> case y1 of ww { Type.Cell ww1 ww2 ww3 ww4 ->
                                   case ww1 of ww5 { GHC.Types.I# ww6 ->
                                   case ww6 of wild2 {
                                     DEFAULT
                                     -> case ww3 of wild3 { GHC.Types.I# x ->
                                        case x of wild4 {
                                          DEFAULT -> go1 ys1
                                          1#
                                          -> case ww2 of ww7 { GHC.Types.I# ww8 ->
                                             case GHC.List.$w!!
                                                    @ Type.Cell
                                                    (GHC.List.$w!!
                                                       @ Type.Line
                                                       field
                                                       (GHC.Prim.+# wild2 1#))
                                                    ww8 of wild5 { Type.Cell ds2 ds3 ds4 ds5 ->
                                             case ds4 of wild6 { GHC.Types.I# x1 ->
                                             case x1 of wild7 {
                                               DEFAULT -> go1 ys1 0# -> GHC.Types.False } } } } } }
                                     15# -> go1 ys1 } } } }
                          } in
                          go1 y }
                 } in
                 go field) -}
b478cf662d841f3258ead25805c45268
  haveFlyFigure_go :: [Type.Line] -> Data.Semigroup.Internal.Any
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
43b510fedc8d4cac81ad96c4c8f75e60
  newFigureOnField ::
    Type.Field
    -> Type.CoordFigures
    -> Graphics.Gloss.Internals.Data.Color.Color
    -> Type.Field
  {- Arity: 3, Strictness: <L,U><S,1*U><L,U> -}
d8bfbc1f1a59e51f323d6062350c3873
  newFigureOnGame :: Type.GameState -> Type.GameState
  {- Arity: 1, Strictness: <S,1*U(U,U,U,U,U,U)>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Type.GameState) ->
                 case w of ww { Type.GameState ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Type.GameState
                   (case ww3 of wild {
                      [] -> case GHC.List.badHead ret_ty Type.Field of {}
                      : x ds1
                      -> case x of ww7 { GHC.Types.I# ww8 ->
                         MyProj.newFigureOnField
                           ww1
                           (GHC.List.$w!! @ Type.CoordFigures ww5 ww8)
                           (GHC.List.$w!!
                              @ Graphics.Gloss.Internals.Data.Color.Color
                              ww6
                              ww8) } })
                   ww2
                   (GHC.List.tail @ Type.NumberFigure ww3)
                   ww4
                   ww5
                   ww6 }) -}
2399e4363da99ba33663adcca5f20cba
  shiftFigure :: Type.GameState -> Type.GameState
  {- Arity: 1, Strictness: <S,1*U(U,U,U,U,U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Type.GameState) ->
                 case ds of wild { Type.GameState ds1 ds2 ds3 ds4 ds5 ds6 ->
                 Type.GameState
                   (MyProj.shiftFigureOnField ds1)
                   ds2
                   ds3
                   ds4
                   ds5
                   ds6 }) -}
bfd60afdf3e20961aead862523995f57
  shiftFigureOnField :: Type.Field -> Type.Field
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (field :: Type.Field) ->
                 Type.mapField
                   (\ (c :: Type.Cell) -> MyProj.createCellShiftFigure field c)
                   field) -}
trusted: none
require own pkg trusted: False
module header:
  Nothing
declaration docs:
arg docs:

