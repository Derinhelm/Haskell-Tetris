
==================== FINAL INTERFACE ====================
2019-03-20 13:55:22.393782466 UTC

interface project-template-0.0.0.0-HkCShUnfJdZ4nPO3MEi7an:MyProj 8063
  interface hash: 5960a897fdb4712042504339ee1192de
  ABI hash: 27e7b956efc19596b7d005a5cfafa228
  export-list hash: 3ae275844e5485e1ffd10404cdb57f66
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 7a242ffa3d761dff45aed995f1434522
  opt_hash: 6faf2de08de32d19db9870899d88e59a
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  plugin_hash: ad164012d6b1e14942349d58b1132007
  sig of: Nothing
  used TH splices: False
  where
exports:
  MyProj.addFigure
  MyProj.checkEnd
  MyProj.createNextFigure
  MyProj.deleteLines
  MyProj.endGame
  MyProj.gameLoop
  MyProj.handle
  MyProj.haveFlyFigure
  MyProj.shiftFigure
module dependencies: Constans Draw Type
package dependencies: GLURaw-2.0.0.4 GLUT-2.7.0.14
                      ObjectName-1.1.0.1 OpenGL-3.0.2.2 OpenGLRaw-3.3.2.0
                      StateVar-1.1.1.1 array-0.5.3.0 base-4.12.0.0 binary-0.8.6.0
                      bmp-1.2.6.3 bytestring-0.10.8.2 containers-0.6.0.1 deepseq-1.4.4.0
                      fixed-0.2.1.1 ghc-boot-th-8.6.3 ghc-prim-0.5.3 gloss-1.13.0.1
                      gloss-rendering-1.13.0.2 half-0.3 integer-gmp-1.0.2.0
                      pretty-1.1.3.6 random-1.1 stm-2.5.0.0 template-haskell-2.14.0.0
                      text-1.2.3.1 time-1.8.0.2
orphans: time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         stm-2.5.0.0:Control.Monad.STM text-1.2.3.1:Data.Text
         binary-0.8.6.0:Data.Binary.Generic text-1.2.3.1:Data.Text.Show
         bytestring-0.10.8.2:Data.ByteString.Builder base-4.12.0.0:GHC.Float
         base-4.12.0.0:GHC.Base
family instance modules: base-4.12.0.0:Control.Applicative
                         base-4.12.0.0:Data.Complex base-4.12.0.0:Data.Functor.Compose
                         base-4.12.0.0:Data.Functor.Const
                         base-4.12.0.0:Data.Functor.Identity
                         base-4.12.0.0:Data.Functor.Product base-4.12.0.0:Data.Functor.Sum
                         base-4.12.0.0:Data.Monoid base-4.12.0.0:Data.Semigroup
                         base-4.12.0.0:Data.Semigroup.Internal base-4.12.0.0:Data.Version
                         base-4.12.0.0:Data.Void base-4.12.0.0:GHC.Exts
                         base-4.12.0.0:GHC.Generics base-4.12.0.0:GHC.IO.Exception
                         containers-0.6.0.1:Data.IntMap.Internal
                         containers-0.6.0.1:Data.IntSet.Internal
                         containers-0.6.0.1:Data.Map.Internal
                         containers-0.6.0.1:Data.Sequence.Internal
                         containers-0.6.0.1:Data.Set.Internal containers-0.6.0.1:Data.Tree
                         ghc-boot-th-8.6.3:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.6.3:GHC.LanguageExtensions.Type half-0.3:Numeric.Half
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         template-haskell-2.14.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.1:Data.Text
import  -/  base-4.12.0.0:GHC.Base cc906f98291a1b830546e99a96674547
import  -/  base-4.12.0.0:Prelude 5c01365ec01f83bd405ac01cbb9a8d76
import  -/  ghc-prim-0.5.3:GHC.Classes e0d9c979f6368701f34fa421754d2cce
import  -/  gloss-1.13.0.1:Graphics.Gloss dc3d422d35cd32353ee5470deb98e8ac
import  -/  gloss-1.13.0.1:Graphics.Gloss.Interface.Pure.Game 3b871ad7b6d70d672603a275ef8ba1e4
import  -/  gloss-1.13.0.1:Graphics.Gloss.Internals.Interface.Event 70b3da3875a2c6427df4272fec7eb5e1
import  -/  Constans a86110f4ae3d5dc6d3d2ae46296ba4f0
  exports: 6b7c9b4c14c288940915583ecccaa9cb
import  -/  Draw 17e18204a137b20103a02e1df7cfb56d
  exports: 551067e2732157ecbd258059c1ba69cc
import  -/  Type 66da883b5513e822d5e6553c4386bfac
  exports: f2deaed13c34578ab3aeb611e8a17f3a
  Field cff2286d27e6392df8d5af5cd3f4b99a
  GameState db2dd883404c1975aa8e3deb66b73c47
  GameState f2f46b54669258b02928e2e0f3f586b3
  funFieldAll f3348f54733fff744c14c483dc51410e
  funFieldAny e2fc49ae8e6e6604234795ccc0087a1c
  gameField f2f46b54669258b02928e2e0f3f586b3
  gameFigures f2f46b54669258b02928e2e0f3f586b3
  gameRandomGen f2f46b54669258b02928e2e0f3f586b3
  gameResult f2f46b54669258b02928e2e0f3f586b3
  lowerCell 57e24d476c19beda91528cbb9b930b2d
  typeCell 46a2f670b604fe56b2cc6403b9b8d47b
cd917b6f8bcf6b8aaecc693871acbf44
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   MyProj.$trModule3
                   MyProj.$trModule1) -}
637140a171b8785eee75ba9876bdb7d6
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS MyProj.$trModule2) -}
204fe942f1473ca5b92b79589814a20e
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("MyProj"#) -}
bd66823722c82efecacae7b7af71d506
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS MyProj.$trModule4) -}
99aa6c486c15517abc54f67dbd421cb5
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("project-template-0.0.0.0-HkCShUnfJdZ4nPO3MEi7an"#) -}
e69e01817fdf432a6cf2ae5bcabcc93d
  addFigure :: Type.GameState -> Type.GameState
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U,U,U)>m,
     Unfolding: InlineRule (1, True, True)
                (\ (field :: Type.GameState) -> field) -}
0ac887e9100709b28c521b266770ec03
  checkEnd :: Type.Field -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (field :: Type.Field) ->
                 case (MyProj.checkEnd_go field)
                        `cast`
                      (Data.Semigroup.Internal.N:Any[0]) of wild {
                   GHC.Types.False
                   -> letrec {
                        go :: [Type.Line] -> GHC.Types.Bool
                          <join 1> {- Arity: 1, Strictness: <S,1*U> -}
                        = \ (ds :: [Type.Line]) ->
                          case ds of wild1 {
                            [] -> GHC.Types.False
                            : y ys
                            -> let {
                                 exit :: GHC.Types.Bool <join 0> = go ys
                               } in
                               letrec {
                                 go1 :: [Type.Cell] -> GHC.Types.Bool
                                   <join 1> {- Arity: 1, Strictness: <S,1*U> -}
                                 = \ (ds1 :: [Type.Cell]) ->
                                   case ds1 of wild2 {
                                     [] -> exit
                                     : y1 ys1
                                     -> case y1 of wild3 { Type.Cell ds2 ds3 ds4 ds5 ->
                                        case ds4 of wild4 { GHC.Types.I# x ->
                                        case x of wild5 {
                                          DEFAULT -> go1 ys1
                                          1#
                                          -> case ds2 of ww5 { GHC.Types.I# ww6 ->
                                             case ds3 of ww7 { GHC.Types.I# ww8 ->
                                             case GHC.List.$w!!
                                                    @ Type.Cell
                                                    (GHC.List.$w!!
                                                       @ Type.Line
                                                       field
                                                       (GHC.Prim.+# ww6 1#))
                                                    ww8 of wild6 { Type.Cell ds6 ds7 ds8 ds9 ->
                                             case ds8 of wild7 { GHC.Types.I# x1 ->
                                             case x1 of wild8 {
                                               DEFAULT -> go1 ys1
                                               0# -> GHC.Types.True } } } } } } } } }
                               } in
                               go1 y }
                      } in
                      go field
                   GHC.Types.True -> GHC.Types.True }) -}
e19a4462f3fe372aa240818f4fe7b626
  checkEnd_go :: [Type.Line] -> Data.Semigroup.Internal.Any
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
566a01fc468e8b3359fc5d525f207b96
  createNextFigure :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1#) -}
207e6e13d640b459e260ebd38a86377e
  deleteLines ::
    Type.Field -> GHC.Types.Int -> (Type.Field, GHC.Types.Int)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m,
     Unfolding: InlineRule (0, True, True)
                (GHC.Tuple.(,) @ Type.Field @ GHC.Types.Int) -}
278378565ff33e3c947cd2df25f2afea
  endGame :: Type.GameState -> Type.GameState
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U,U,U)>m,
     Unfolding: InlineRule (1, True, True)
                (\ (x :: Type.GameState) -> x) -}
6b092e4dfd8d279d1f72802e83531577
  gameLoop :: GHC.Types.Float -> Type.GameState -> Type.GameState
  {- Arity: 2, Strictness: <L,A><S(SLLL),1*U(U,U,U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: GHC.Types.Float) (game :: Type.GameState) ->
                 case game of wild { Type.GameState ds1 ds2 ds3 ds4 ->
                 case MyProj.haveFlyFigure ds1 of wild1 {
                   GHC.Types.False
                   -> case MyProj.checkEnd ds1 of wild2 { DEFAULT -> wild }
                   GHC.Types.True -> wild } }) -}
c63718ef401cfd9c35a6526a21e6eacc
  handle ::
    Graphics.Gloss.Internals.Interface.Event.Event
    -> Type.GameState -> Type.GameState
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><S,1*U(U,U,U,U)>m,
     Unfolding: InlineRule (2, True, True)
                (\ (key :: Graphics.Gloss.Internals.Interface.Event.Event)
                   (game :: Type.GameState) ->
                 game) -}
60205c434b373e3b39c352866ccf8247
  haveFlyFigure :: Type.Field -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (field :: Type.Field) ->
                 let {
                   exit :: GHC.Types.Bool <join 0>
                   = (MyProj.haveFlyFigure_go field)
                       `cast`
                     (Data.Semigroup.Internal.N:Any[0])
                 } in
                 letrec {
                   go :: [Type.Line] -> GHC.Types.Bool
                     <join 1> {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [Type.Line]) ->
                     case ds of wild {
                       [] -> exit
                       : y ys
                       -> let {
                            exit1 :: GHC.Types.Bool <join 0> = go ys
                          } in
                          letrec {
                            go1 :: [Type.Cell] -> GHC.Types.Bool
                              <join 1> {- Arity: 1, Strictness: <S,1*U> -}
                            = \ (ds1 :: [Type.Cell]) ->
                              case ds1 of wild1 {
                                [] -> exit1
                                : y1 ys1
                                -> case y1 of wild2 { Type.Cell ds2 ds3 ds4 ds5 ->
                                   case ds4 of wild3 { GHC.Types.I# x ->
                                   case x of wild4 {
                                     DEFAULT -> go1 ys1
                                     1#
                                     -> case ds2 of ww5 { GHC.Types.I# ww6 ->
                                        case ds3 of ww7 { GHC.Types.I# ww8 ->
                                        case GHC.List.$w!!
                                               @ Type.Cell
                                               (GHC.List.$w!!
                                                  @ Type.Line
                                                  field
                                                  (GHC.Prim.+# ww6 1#))
                                               ww8 of wild5 { Type.Cell ds6 ds7 ds8 ds9 ->
                                        case ds8 of wild6 { GHC.Types.I# x1 ->
                                        case x1 of wild7 {
                                          DEFAULT -> go1 ys1 0# -> GHC.Types.False } } } } } } } } }
                          } in
                          go1 y }
                 } in
                 go field) -}
b478cf662d841f3258ead25805c45268
  haveFlyFigure_go :: [Type.Line] -> Data.Semigroup.Internal.Any
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
4b9901ac103a7604de22b6976e213611
  shiftFigure :: Type.GameState -> Type.GameState
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U,U,U)>m,
     Unfolding: InlineRule (1, True, True)
                (\ (x :: Type.GameState) -> x) -}
trusted: none
require own pkg trusted: False
module header:
  Nothing
declaration docs:
arg docs:

